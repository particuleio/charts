// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nds.proto

package istio_networking_nds_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Table of hostnames and their IPs to br used for DNS resolution at the agent
// Sent by istiod to istio agents via xds
type NameTable struct {
	// Map of hostname to IP plus other attributes used for resolution such as short names,
	// k8s domains, etc.
	Table                map[string]*NameTable_NameInfo `protobuf:"bytes,1,rep,name=table,proto3" json:"table,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *NameTable) Reset()         { *m = NameTable{} }
func (m *NameTable) String() string { return proto.CompactTextString(m) }
func (*NameTable) ProtoMessage()    {}
func (*NameTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_nds_e4011d50349a6001, []int{0}
}
func (m *NameTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameTable.Unmarshal(m, b)
}
func (m *NameTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameTable.Marshal(b, m, deterministic)
}
func (dst *NameTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameTable.Merge(dst, src)
}
func (m *NameTable) XXX_Size() int {
	return xxx_messageInfo_NameTable.Size(m)
}
func (m *NameTable) XXX_DiscardUnknown() {
	xxx_messageInfo_NameTable.DiscardUnknown(m)
}

var xxx_messageInfo_NameTable proto.InternalMessageInfo

func (m *NameTable) GetTable() map[string]*NameTable_NameInfo {
	if m != nil {
		return m.Table
	}
	return nil
}

type NameTable_NameInfo struct {
	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
	// the registry where this
	Registry string `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	// these are set only for k8s services
	Shortname            string   `protobuf:"bytes,3,opt,name=shortname,proto3" json:"shortname,omitempty"`
	Namespace            string   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameTable_NameInfo) Reset()         { *m = NameTable_NameInfo{} }
func (m *NameTable_NameInfo) String() string { return proto.CompactTextString(m) }
func (*NameTable_NameInfo) ProtoMessage()    {}
func (*NameTable_NameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_nds_e4011d50349a6001, []int{0, 0}
}
func (m *NameTable_NameInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameTable_NameInfo.Unmarshal(m, b)
}
func (m *NameTable_NameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameTable_NameInfo.Marshal(b, m, deterministic)
}
func (dst *NameTable_NameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameTable_NameInfo.Merge(dst, src)
}
func (m *NameTable_NameInfo) XXX_Size() int {
	return xxx_messageInfo_NameTable_NameInfo.Size(m)
}
func (m *NameTable_NameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NameTable_NameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NameTable_NameInfo proto.InternalMessageInfo

func (m *NameTable_NameInfo) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

func (m *NameTable_NameInfo) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *NameTable_NameInfo) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

func (m *NameTable_NameInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*NameTable)(nil), "istio.networking.nds.v1.NameTable")
	proto.RegisterMapType((map[string]*NameTable_NameInfo)(nil), "istio.networking.nds.v1.NameTable.TableEntry")
	proto.RegisterType((*NameTable_NameInfo)(nil), "istio.networking.nds.v1.NameTable.NameInfo")
}

func init() { proto.RegisterFile("nds.proto", fileDescriptor_nds_e4011d50349a6001) }

var fileDescriptor_nds_e4011d50349a6001 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x4b, 0x29, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xcf, 0x2c, 0x2e, 0xc9, 0xcc, 0xd7, 0xcb, 0x4b, 0x2d,
	0x29, 0xcf, 0x2f, 0xca, 0xce, 0xcc, 0x4b, 0xd7, 0x03, 0xc9, 0x95, 0x19, 0x2a, 0xad, 0x65, 0xe2,
	0xe2, 0xf4, 0x4b, 0xcc, 0x4d, 0x0d, 0x49, 0x4c, 0xca, 0x49, 0x15, 0x72, 0xe6, 0x62, 0x2d, 0x01,
	0x31, 0x24, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x74, 0xf5, 0x70, 0x68, 0xd3, 0x83, 0x6b, 0xd1,
	0x03, 0x93, 0xae, 0x79, 0x25, 0x45, 0x95, 0x41, 0x10, 0xbd, 0x52, 0x25, 0x5c, 0x1c, 0x20, 0x69,
	0xcf, 0xbc, 0xb4, 0x7c, 0x21, 0x01, 0x2e, 0xe6, 0xcc, 0x82, 0x62, 0xb0, 0x71, 0x9c, 0x41, 0x20,
	0xa6, 0x90, 0x14, 0x17, 0x47, 0x51, 0x6a, 0x7a, 0x66, 0x71, 0x49, 0x51, 0xa5, 0x04, 0x93, 0x02,
	0xa3, 0x06, 0x67, 0x10, 0x9c, 0x2f, 0x24, 0xc3, 0xc5, 0x59, 0x9c, 0x91, 0x5f, 0x54, 0x92, 0x97,
	0x98, 0x9b, 0x2a, 0xc1, 0x0c, 0x96, 0x44, 0x08, 0x80, 0x64, 0x41, 0x74, 0x71, 0x41, 0x62, 0x72,
	0xaa, 0x04, 0x0b, 0x44, 0x16, 0x2e, 0x20, 0x95, 0xca, 0xc5, 0x85, 0x70, 0x0a, 0xc8, 0xde, 0xec,
	0xd4, 0x4a, 0x09, 0x46, 0xb0, 0x2a, 0x10, 0x53, 0xc8, 0x91, 0x8b, 0xb5, 0x2c, 0x31, 0xa7, 0x34,
	0x15, 0x6c, 0x29, 0xb7, 0x91, 0x36, 0x11, 0x5e, 0x83, 0xf9, 0x22, 0x08, 0xa2, 0xd3, 0x8a, 0xc9,
	0x82, 0x31, 0x89, 0x0d, 0x1c, 0x9e, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x59, 0x9f,
	0x74, 0x5c, 0x01, 0x00, 0x00,
}
